@startuml

skinparam classAttributeIconSize 0

abstract class QAbstractTableModel

QAbstractTableModel <|-- MeasuresDataModel

MainWindow "1" *-- "1" MeasuresManager
MeasuresDataModel "0..*" -right--* "1" MeasuresManager: Содержит
MeasuresDataModel "1" *-- "1..*" CellData
MeasuresDataModel "1" *-- "1..*" MeasureParameters

MeasuresManager "1" o-- "1" QTableWidget
MeasuresManager "1" o-- "1" QTableView

CellData "1" *-- "1" CellConfig


class MainWindow {
-QTableWidget measures_list_table
-QTableView measures_data_view
-MeasuresManager measures_manager

+open_measures_button_clicked()
+save_measures_button_clicked()
+add_row_button_clicked()
+remove_row_button_clicked()
+lock_cells_button_clicked()
+unlock_cells_button_clicked()
+show_equal_cells_button_clicked(bool a_enable)
}

class MeasuresManager {
-QTableView& measures_data_view
-QTableWidget& measures_list_table
-Dict[str, MeasureParameters] measures_parameters
-Dict[str, MeasureDataModel] measure_data_models
-str edited_name
+MeasuresManager(QTableWidget a_meas_list, QTableView a_meas_data)
+change_measure(str a_measure_name)
+bool add_new_measure(int a_pos, str a_name="")
+remove_measure(str a_name)
+bool open_measures()
+bool save_measures()
+bool save_current_measure()
+add_row_to_current_measure(int a_selected_row)
+remove_row_from_current_measure(int a_selected_row)
+lock_cells(bool a_lock)
+show_equal_cells(bool a_enable)
+cell_clicked(QModelIndex a_index): pyqtSlot
+set_edited_name(str a_name): pyqtSlot
+update_measure_name(str a_new_name): pyqtSlot
+set_data_save_state(str a_name, bool a_state): pyqtSlot
+get_next_locked_cell(int a_current_row, int a_current_column)
}

class MeasuresDataModel {
-str name
+bool load_from_file(str a_filename)
+bool save_to_file(str a_filename)
+bool is_saved()
+add_row(int a_row)
+remove_row(int a_row)
+lock_cell(int a_row, int a_column, bool a_lock)
+bool is_cell_locked(int a_row, int a_column)
+set_compared_cell(int a_row, int a_column)
+set_name(str a_name)
+data_state_changed(str a_name, bool a_state): pyqtSignal
+double get_cell_amplitude(int a_row, int a_column)
+double get_cell_frequency(int a_row, int a_column)
+MeasureParameters get_measure_parameters()

+bool flash_all_data()
+bool flash_diapason_of_cell(int a_row, int a_column)
+stop_flashing()
}

class MeasureParameters {
-signal_type
-flash_after_finishing
-flash_table
}

class CellData {
-CellConfig cell_config
-bool locked
-list measured_values
-sko
-deviation
+CellConfig get_cell_config()
+add_measured_value(a_value)
}

class CellConfig {

}

class QTableWidget {
-currentItemChanged(): pyqtSignal
-cellChanged(): pyqtSignal
-itemDoubleClicked(): pyqtSignal
}

class QTableView {
-clicked(QModelIndex a_index): pyqtSignal
+list get_selected_cells()
}

@enduml
